name: "ci"
on:
  pull_request: {}
  push:
    branches:
      - staging
      - trying
      - master
env:
  CI: 1
  RUST_BACKTRACE: full
  CARGO_INCREMENTAL: 0
  CARGO_BUILD_PIPELINING: "false"
jobs:
  hack:
    name: hack
    runs-on: "ubuntu-18.04"
    steps:
      - name: Success
        run: echo "Success"
  py-fmt:
    name: py-fmt
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - $include: rustc
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: check python code formatting
        run: |
          pip3 install autopep8
          cd src
          cargo jjs-check --no-default --autopep8
  py-test:
    name: py-test
    runs-on: "ubuntu-18.04"
    services:
      mongo:
        image: mongo:4.2.6-bionic
        ports:
          - 27017:27017
    env:
      DATABASE_URL: mongodb://localhost:27017/jjs
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: run python tests
        run: |
          pip3 install pytest
          cd src/apiserver
          pip3 install -r requirements.txt
          python -m pytest
  misspell:
    name: misspell
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v2
      - uses: reviewdog/action-misspell@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          locale: US
  style:
    name: style
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - $include: rustc
      - name: check rust code formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check
      - name: Run shellcheck
        run: cargo jjs-check --no-default --shellcheck
  clippy:
    name: clippy
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - $include: rustc
      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace
  cpp:
    name: cpp
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: bash ci-data/pvs.sh
        env:
          SECRET_ENABLED: ${{ secrets.SECRET_ENABLED }}
          PVS_NAME: ${{ secrets.PVS_NAME }}
          PVS_LICENSE_KEY: ${{ secrets.PVS_LICENSE_KEY }}
      - $include: sysdeps
      - $include: rustc
      - name: compile testlib
        run: cargo jjs-check --no-default --testlib
      - name: Run PVS
        run: cargo jjs-check --no-default --pvs
        env:
          SECRET_ENABLED: ${{ secrets.SECRET_ENABLED }}
  unit-tests:
    name: unit-tests
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - $include: sysdeps
      - $include: rustc
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
  udeps:
    name: udeps
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - $include: sysdeps
      - $include: rustc
      - name: Get Rust version
        id: rustc_version
        run: |
          rust_version=$(rustc --version | md5sum | cut -f 1-1 -d ' ')
          echo "##[set-output name=version;]$(echo $rust_version)"
      - name: Fetch cargo-udeps
        id: cache_udeps
        uses: actions/cache@v1.1.0
        with: 
          path: ~/udeps
          key: ${{ runner.os }}-udeps-bin-${{ steps.rustc_version.outputs.version }}-v0.1.11
      - name: Install cargo-udeps
        if: steps.cache_udeps.outputs.cache-hit != 'true'
        run: | 
          cargo install cargo-udeps --locked --version 0.1.11
          mkdir -p ~/udeps
          cp $( which cargo-udeps ) ~/udeps
      - name: Cache build dir
        uses: actions/cache@v1.1.0
        with:
          path: target
          key: ${{ runner.os }}-udeps-${{ steps.rustc_version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - name: cargo-udeps
        run: |
          export PATH=~/udeps:$PATH
          cargo udeps
  codegen:
    name: codegen
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - name: Free space
        run: sudo bash ci-data/free-space.sh
      - $include: sysdeps
      - $include: rustc
      - $include: pkg-login
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - run: pip install -r src/apiserver/requirements.txt
      - run: cargo jjs codegen
      - run: git diff --exit-code
