name: "ci"
on:
  pull_request: {}
  push:
    branches:
      - staging
      - trying
      - master
env:
  CI: 1
  RUST_BACKTRACE: full
  CARGO_INCREMENTAL: 0
  CARGO_BUILD_PIPELINING: "false"
jobs:
  style:
    name: style
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: bash scripts/ci-env.sh
      - name: check rust code formatting
        run: cargo jjs-check --no-default --rustfmt
      - name: run shellcheck
        run: cargo jjs-check --no-default --shellcheck
  clippy:
    name: clippy
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: bash scripts/ci-env.sh
      - name: run clippy
        run: cargo jjs-check --no-default --clippy
  cpp:
    name: cpp
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: bash scripts/ci-env.sh
        env:
          SECRET_ENABLED: ${{ secrets.SECRET_ENABLED }}
          PVS_NAME: ${{ secrets.PVS_NAME }}
          PVS_LICENSE_KEY: ${{ secrets.PVS_LICENSE_KEY }}
      - name: compile testlib
        run: cargo jjs-check --no-default --testlib
      - name: compile minion-ffi tests
        run: cargo jjs-check --no-default --minion-ffi
      - name: Run PVS
        run: cargo jjs-check --no-default --pvs
        env:
          SECRET_ENABLED: ${{ secrets.SECRET_ENABLED }}
  unit-tests:
    name: unit-tests
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: bash scripts/ci-env.sh
      - name: cargo jjs-test
        run: cargo jjs-test
  udeps:
    name: udeps
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: |
          bash scripts/ci-env.sh
          cargo install cargo-udeps --locked
      - name: Get Rust version
        id: rustc_version
        run: |
          rust_version=$(rustc --version | md5sum | cut -f 1-1 -d ' ')
          echo "##[set-output name=version;]$(echo $rust_version)"
      - name: Cache cargo registry
        uses: actions/cache@v1.1.0
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1.1.0
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('Cargo.lock') }}
      - name: Cache build dir
        uses: actions/cache@v1.1.0
        with:
          path: target
          key: ${{ runner.os }}-udeps-${{ steps.rustc_version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - name: cargo-udeps
        run: cargo jjs-check --no-default --udeps || true #FIXME
  codegen:
    name: codegen
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: bash scripts/ci-env.sh
      - run: cargo jjs codegen
      - run: |
          git add rust-toolchain
          git diff --exit-code

  e2e:
    name: e2e
    runs-on: "ubuntu-18.04"
    env:
      PGDATABASE: jjs
      PGHOST: localhost
      PGPORT: 5432
      PGUSER: postgres
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >- 
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v1
      - run: |
          bash scripts/ci-env.sh
          sudo apt install -y --no-install-recommends postgresql-client-10 libunwind-dev
          createdb jjs
          psql -c "CREATE ROLE jjs WITH LOGIN PASSWORD 'internal'"
      - name: Get Rust version
        id: rustc_version
        run: |
          rust_version=$(rustc --version | md5sum | cut -f 1-1 -d ' ')
          echo "##[set-output name=version;]$(echo $rust_version)"
      - name: Cache cargo registry
        uses: actions/cache@v1.1.0
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1.1.0
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('Cargo.lock') }}
      - name: Cache build dir
        uses: actions/cache@v1.1.0
        with:
          path: target
          key: ${{ runner.os }}-e2e-${{ steps.rustc_version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - name: build
        run: cargo jjs-build
        env:
          JOB: e2e
      - name: launch jjs
        run: |
          sudo dpkg -i /opt/jjs/pkg/jjs.deb
          sudo adduser jjs --shell $( which false ) --disabled-password --home /home/jjs
          sudo jjs-setup ./ci-data/test-e2e-profile.yaml upgrade
          sudo cp ci-data/env.txt /home/jjs/etc/env.txt
          sudo systemctl start jjs-invoker
          sudo systemctl start jjs-apiserver
      - name: wait for launch
        run: cargo run --package util
        env:
          JJS_WAIT: tcp://localhost:1779
          RUST_LOG: util::wait=debug
      - name: run tests
        run: cargo jjs-test --integration-tests --skip-unit --nocapture
      - name: collect logs
        if: always()
        run: |
          mkdir logs
          sudo journalctl -u jjs-apiserver.service -p debug > logs/apiserver.txt
          sudo journalctl -u jjs-invoker.service -p debug > logs/invoker.txt
          cat logs/*
      - name: upload logs
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: logs
          path: ./logs
  vmsysroot:
    name: vm-sysroot
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: |
          bash scripts/ci-env.sh
          sudo apt install -y --no-install-recommends postgresql-client-10 postgresql-10 qemu-system grub2 flex bison
      - name: Cache cargo registry
        uses: actions/cache@v1.1.0
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1.1.0
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('Cargo.lock') }}
      - name: Cache build dir
        uses: actions/cache@v1.1.0
        with:
          path: target
          key: ${{ runner.os }}-vmsysroot-${{ steps.rustc_version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-vmsysroot-${{ steps.rustc_version.outputs.version }}-
      - name: build jjs
        run: |
          mkdir -p target
          cd target
          touch .jjsbuild
          ../configure --enable-archive --enable-extras --disable-man
          make
      - name: build vm-sysroot
        run: |
          cd vm-sysroot
          ./netns-build.sh || true
          sudo sed -i 's/^\(linux.*\)$/\1 console=ttyS0/' sysroot/boot/grub/grub.cfg
          sudo tee -a sysroot/init >/dev/null < ../scripts/uml-tests.sh
          touch image/hdd.img image/full.img # for proper permissions
          sudo image/build-image.sh
          sudo image/build-full.sh
          sudo rm -rvf sysroot # otherwise it will fail to push build cache
      - name: build UML
        run: |
          mkdir uml
          cd uml
          wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.19.112.tar.xz -O - | tar -xJf -
          cd linux-4.19.112
          make ARCH=um defconfig
          echo CONFIG_USER_NS=y >> .config
          echo CONFIG_PID_NS=y >> .config
          echo CONFIG_CGROUPS=y >> .config
          echo CONFIG_CGROUP_CPUACCT=y >> .config
          echo CONFIG_CGROUP_PIDS=y >> .config
          echo CONFIG_MEMCG=y >> .config
          echo CONFIG_MEMCG_SWAP=y >> .config
          make ARCH=um oldconfig </dev/null
          make ARCH=um -j2
      - name: launch vm-sysroot
        if: always()
        run: |
          script -c 'uml/linux-4.19.112/vmlinux mem=1024M ubda=vm-sysroot/image/hdd.img root=/dev/ubda con0=fd:0,fd:1 con=nul' vm-sysroot.log || true
          fgrep -q 'status: Accepted(ACCEPTED)' vm-sysroot.log
      - name: upload logs
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: vm-sysroot-log
          path: vm-sysroot.log
