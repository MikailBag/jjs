initSidebarItems({"enum":[["ErrorCode",""],["SharedDirectoryAccessKind",""],["StdioMember",""],["WaitOutcome",""]],"fn":[["get_string",""],["minion_backend_create","Create backend, default for target platform"],["minion_backend_free","Drop backend # Safety `b` must be pointer to Backend, allocated by `minion_backend_create`"],["minion_cp_exitcode","Safety Provided pointers must be valid"],["minion_cp_free","Safety `cp` must be valid pointer to ChildProcess object, allocated by `minion_cp_spawn`"],["minion_cp_spawn","Safety Provided `options` must be well-formed"],["minion_cp_wait","Wait for process exit, with timeout. # Safety Provided pointers must be valid"],["minion_describe_status","Get string description of given `error_code`, returned by minion-ffi previously. Returns char const* pointer with static lifetime. This pointer must not be freed. Description is guaranteed to be null-terminated ASCII string"],["minion_dominion_check_cpu_tle","Safety `out` must be valid"],["minion_dominion_check_real_tle","Safety `out` must be valid"],["minion_dominion_create","Safety Provided arguments must be well-formed"],["minion_dominion_free","Safety `dominion` must be pointer, returned by `minion_dominion_create`."],["minion_dominion_kill",""],["minion_lib_init","Safety Must be called once Must be called before any library usage"]],"static":[["ENV_ITEM_FIN",""],["EXIT_CODE_STILL_RUNNING",""],["SHARED_DIRECTORY_ACCESS_FIN",""]],"struct":[["Backend",""],["ChildProcess",""],["ChildProcessOptions",""],["Dominion",""],["DominionOptions",""],["EnvItem",""],["SharedDirectoryAccess",""],["StdioHandleSet",""],["TimeSpec",""]]});