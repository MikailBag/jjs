(function() {var implementors = {};
implementors["minion"] = [{"text":"impl IntoError&lt;<a class=\"enum\" href=\"minion/enum.Error.html\" title=\"enum minion::Error\">Error</a>&gt; for <a class=\"struct\" href=\"minion/errors/struct.NotSupported.html\" title=\"struct minion::errors::NotSupported\">NotSupported</a> <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"enum\" href=\"minion/enum.Error.html\" title=\"enum minion::Error\">Error</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + ErrorCompat,&nbsp;</span>","synthetic":false,"types":["minion::errors::NotSupported"]},{"text":"impl&lt;__T0&gt; IntoError&lt;<a class=\"enum\" href=\"minion/enum.Error.html\" title=\"enum minion::Error\">Error</a>&gt; for <a class=\"struct\" href=\"minion/errors/struct.System.html\" title=\"struct minion::errors::System\">System</a>&lt;__T0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"enum\" href=\"minion/enum.Error.html\" title=\"enum minion::Error\">Error</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + ErrorCompat,<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;,&nbsp;</span>","synthetic":false,"types":["minion::errors::System"]},{"text":"impl IntoError&lt;<a class=\"enum\" href=\"minion/enum.Error.html\" title=\"enum minion::Error\">Error</a>&gt; for <a class=\"struct\" href=\"minion/errors/struct.Io.html\" title=\"struct minion::errors::Io\">Io</a> <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"enum\" href=\"minion/enum.Error.html\" title=\"enum minion::Error\">Error</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + ErrorCompat,&nbsp;</span>","synthetic":false,"types":["minion::errors::Io"]},{"text":"impl IntoError&lt;<a class=\"enum\" href=\"minion/enum.Error.html\" title=\"enum minion::Error\">Error</a>&gt; for <a class=\"struct\" href=\"minion/errors/struct.Sandbox.html\" title=\"struct minion::errors::Sandbox\">Sandbox</a> <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"enum\" href=\"minion/enum.Error.html\" title=\"enum minion::Error\">Error</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + ErrorCompat,&nbsp;</span>","synthetic":false,"types":["minion::errors::Sandbox"]},{"text":"impl IntoError&lt;<a class=\"enum\" href=\"minion/enum.Error.html\" title=\"enum minion::Error\">Error</a>&gt; for <a class=\"struct\" href=\"minion/errors/struct.Unknown.html\" title=\"struct minion::errors::Unknown\">Unknown</a> <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"enum\" href=\"minion/enum.Error.html\" title=\"enum minion::Error\">Error</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + ErrorCompat,&nbsp;</span>","synthetic":false,"types":["minion::errors::Unknown"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()