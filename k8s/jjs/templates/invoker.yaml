apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: invoker
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: invoker
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: invoker
subjects:
  - kind: ServiceAccount
    name: invoker
    apiGroup: ""
roleRef:
  kind: Role
  name: invoker
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: invoker
  labels:
    app: invoker
# {{- if .Values.dev.kubeScore  }}
  annotations:
    kube-score/ignore: container-security-context
# {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: invoker
  template:
    metadata:
      labels:
        app: invoker
    spec:
      serviceAccountName: invoker
      containers:
        - name: invoker
          env: 
            - name: RUST_LOG
              value: info,invoker=debug,problem_loader=debug,puller=debug
            - name: JJS_AUTH_DATA_INLINE
              value: '{"endpoint": "http://apiserver:1779/", "auth": {"byToken": {"token": "Dev::root"}}}'
          image: "{{ .Values.image.repositoryPrefix }}invoker:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext: 
            privileged: true
          ports:
            - name: http
              containerPort: 1789
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http
---
apiVersion: v1
kind: Service
metadata:
  name: invoker
spec:
  type: ClusterIP
  ports:
    - port: 1789
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: invoker
