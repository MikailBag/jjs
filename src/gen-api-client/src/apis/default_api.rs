/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::option::Option;
use std::{borrow::Borrow, rc::Rc};

use futures::Future;
use hyper;
use serde_json;

use super::{configuration, request as __internal_request, Error};

pub struct DefaultApiClient<C: hyper::client::connect::Connect + Clone + Send + Sync + 'static> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect + Clone + Send + Sync + 'static> DefaultApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DefaultApiClient<C> {
        DefaultApiClient { configuration }
    }
}

pub trait DefaultApi {
    fn api_version(
        &self,
    ) -> Box<dyn Future<Output = Result<crate::models::ApiVersion, Error<serde_json::Value>>> + Unpin>;
    fn is_dev(&self) -> Box<dyn Future<Output = Result<bool, Error<serde_json::Value>>> + Unpin>;
}

impl<C: hyper::client::connect::Connect + Clone + Send + Sync + 'static> DefaultApi
    for DefaultApiClient<C>
{
    fn api_version(
        &self,
    ) -> Box<dyn Future<Output = Result<crate::models::ApiVersion, Error<serde_json::Value>>> + Unpin>
    {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/system/api-version".to_string());

        // TODO: do not box here
        Box::new(req.execute(self.configuration.borrow()))
    }

    fn is_dev(&self) -> Box<dyn Future<Output = Result<bool, Error<serde_json::Value>>> + Unpin> {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/system/is-dev".to_string());

        // TODO: do not box here
        Box::new(req.execute(self.configuration.borrow()))
    }
}
