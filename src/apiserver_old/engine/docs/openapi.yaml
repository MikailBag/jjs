openapi: 3.0.0
info:
  title: "JJS main API"
  version: ""

paths:
  "/contests/{name}":
    get:
      operationId: getContest
      summary: Finds contest by name
      description: |-
        If contest with this name does not exists, `null` is returned
      parameters:
        - $ref: "#/components/parameters/contest_name"
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contest"
  "/contests/{name}/participation":
    get:
      operationId: getContestParticipation
      summary: Get information about current user participation
      description: |-
        You should check that status is "ACTIVE". If it is not, you need register to contest (see updateContestParticipation).
        Otherwise, you will not be able to submit runs
      parameters:
        - $ref: "#/components/parameters/contest_name"
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participation"
    patch:
      operationId: updateContestParticipation
      summary: Update current user participation
      description: |-
        Using this operation you can start patricipating in contest
      parameters:
        - $ref: "#/components/parameters/contest_name"
      responses:
        204:
          description: ok
  "/contests/{name}/problems":
    get:
      operationId: listContestProblems
      summary: Lists all problems in contest `name`
      parameters:
        - $ref: "#/components/parameters/contest_name"
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Problem"
  "/contests/{name}/standings":
    get:
      operationId: getContestStandings
      summary: Returns standings as JSON object
      parameters:
        - $ref: "#/components/parameters/contest_name"
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
  "/contests":
    get:
      operationId: listContests
      summary: Lists contests
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contest"
    patch:
      operationId: patchRun
      summary: Modifies run
      description: |-
        Updates run according to given arguments

        On success, new run state is returned
      parameters:
        - $ref: "#/components/parameters/run_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunPatch"

      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
    delete:
      operationId: deleteRun
      summary: Deletes run
      parameters:
        - $ref: "#/components/parameters/run_id"
      responses:
        204:
          description: ok
  "/runs/{id}/live":
    get:
      operationId: getRunLiveStatus
      summary: returns incremental Live Status
      parameters:
        - $ref: "#/components/parameters/run_id"
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunLiveStatusUpdate"
  "/runs/{id}/binary":
    get:
      operationId: getRunBinary
      summary: Returns run build artifact as base64-encoded JSON string
      parameters:
        - $ref: "#/components/parameters/run_id"
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: string
        204:
          description: run binary is not available
  "/runs/{id}/protocol":
    get:
      operationId: getRunProtocol
      summary: Returns invocation protocol as JSON document
      responses:
        200:
          description: ok
          content:
            /application/json:
              schema:
                type: object
      parameters:
        - $ref: "#/components/parameters/run_id"
        - in: query
          name: compile_log
          description: If false, compilation logs will be excluded
          schema:
            type: boolean
        - in: query
          name: test_data
          description: If false, test data will be excluded for all tests
          schema:
            type: boolean
        - in: query
          name: output
          description: If false, solution stdout&stderr will be excluded for all tests
          schema:
            type: boolean
        - in: query
          name: answer
          description: If false, correct answer will be excluded for all tests
          schema:
            type: boolean
        - in: query
          name: resource_usage
          description: If false, resource usage will be excluded for all tests
          schema:
            type: boolean
  "/toolchains":
    get:
      operationId: listToolchains
      summary: Lists toolchains
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Toolchain"
  "/auth/simple":
    post:
      operationId: logIn
      summary: Login using login and password
      description: |-
        In future, other means to authn will be added.
        See `SessionToken` documentation for more details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimpleAuthParams"
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionToken"
  "/users":
    post:
      operationId: createUser
      summary: Creates new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateParams"
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

security:
  - AccessToken: []

components:
  securitySchemes:
    AccessToken:
      type: apiKey
      in: header
      name: Authorization
      description: This token is issued by `/auth/simple` endpoint.
        If it returned SessionToken `tok`, then AccessToken is "Token ${tok.data}"

  parameters:
    contest_name:
      in: path
      name: name
      required: true
      schema:
        type: string
    run_id:
      in: path
      name: id
      required: true
      schema:
        type: integer
        format: uint32
